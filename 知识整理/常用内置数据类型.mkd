# 常用内置数据类型
![](/图片文件/数据类型/内置数据类型.svg?raw=true)
![](/python期末复习/图片文件/数据类型/内置数据类型.svg?raw=true)

## 1.数值数据类型

![](/python期末复习/图片文件/数据类型/数值数据类型.svg?raw=true)
![](/图片文件/数据类型/数值数据类型.svg?raw=true)
### 1.1 整数类型 `int`
#### 整型字面量
数字字符串通常被解释为十进制，可以用前缀表示其他进制的整数
```python
十进制: 0 ~ 9
0b 二进制: 0 ~  1
0o 八进制: 0 ~ 7
0x 十六进制: 0 ~ 9, a ~ f(A ~ F)
```
#### `int` 对象
```python
int(x, base=10)  # 将x转换为整数，base为进制数，默认为10进制
```
方法
```python
i.bit_length()  # 返回 i 的二进制表示的长度，不包括符号位
```

### 1.2 浮点数类型 `float`
#### 浮点型字面量
```python
1.23  # 科学计数法
1.    # 小数点后为0
.123  # 小数点前为0
3.14e-2  # 科学计数法
```
#### `float` 对象
```python
float(x)  # 将x转换为浮点数
```
方法
```python
f.as_integer_ratio()  # 返回浮点数的分子和分母，返回值为元组
is_integer()  # 判断浮点数是否为整数，返回值为bool值
```
#### 浮点数的表示和相等性比较
引入 `math` 模块的 `isclose()` 函数，用于比较两个浮点数是否相等，返回值为 `bool` 值
```python
import math
math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)  # a, b为要比较的浮点数，rel_tol为相对容差，abs_tol为绝对容差
```
### 1.3 布尔类型 `bool`
#### 布尔型字面量
```python
True  # 真
False  # 假
```
#### `bool` 对象
```python
bool(x)  # 将x转换为布尔值
```
空的 `bool` 值为 `False` ，非空的 `bool` 值为 `True`

### 1.4 复数类型 `complex`
#### 复数型字面量
```python
1 + 2j  # 实部为1，虚部为2
```
#### `complex` 对象
```python
complex(real, imag)  # 将real和imag转换为复数，real为实部，imag为虚部
```
#### 属性和方法
```python
c.real  # 返回复数的实部
c.imag  # 返回复数的虚部
c.conjugate()  # 返回复数的共轭复数
```
#### 复数的运算
```python
c1 + c2  # 复数的加法
c1 - c2  # 复数的减法
c1 * c2  # 复数的乘法
c1 / c2  # 复数的除法
abs(c)  # 复数的模
```


## 2.序列数据类型
![](/python期末复习/图片文件/数据类型/序列数据类型.svg?raw=true)
![](/图片文件/数据类型/序列数据类型.svg?raw=true)
### 2.1 序列的操作
![](/python期末复习/图片文件/数据类型/序列数据类型操作.svg?raw=true)
![](/图片文件/数据类型/序列数据类型操作.svg?raw=true)
#### 2.1.1 基本操作
```python
len(s)  # 返回序列的长度
max(s)  # 返回序列中的最大值
min(s)  # 返回序列中的最小值
sum(s)  # 返回序列中的元素之和，元素必须是数值类型
```
#### 2.1.2 索引访问操作
```python
s[i]  # 返回序列中第i个元素，i为索引，从0开始
```
 说明：\
 1.索引下标从0开始，最后一个元素是 `s[len(s)-1]` 或 `s[-1]`\
 2.索引可以是负数，从右往左，最后一个元素是 `s[-1]` ，倒数第二个元素是 `s[-2]` ，以此类推\
 3.如果索引下标越界，会抛出 `IndexError` 异常；如果索引下标不是整数，会抛出 `TypeError` 异常
#### 2.1.3 切片操作
基本形式
```python
s[i:j]  或者  s[i:j:k] 
'''
返回序列中从第i个元素到第j个元素，步长为k的切片，i, j, k为索引，从0开始
'''
```
说明：\
1.切片操作返回一个新的序列，原序列不变\
2.下标也可以是负数，如果截取范围内没有数据，则返回空元组，如果超过下标范围，不报错

#### 2.1.4 序列的连接和重复性
```python
s1 + s2  # 连接两个序列，返回一个新的序列，原序列不变
s * n    # 重复序列n次，返回一个新的序列，原序列不变
```

#### 2.1.5 成员关系操作
```python
x in s  # 判断x是否在序列s中，返回值为bool值
x not in s  # 判断x是否不在序列s中，返回值为bool值
s.count(x[.strat[,end]])  # 返回序列s中x出现的次数，start和end为可选参数，指定切片范围
s.index(x[.strat[,end]])  # 返回序列s中x第一次出现的位置，start和end为可选参数，指定切片范围，如果x不在序列s中，会抛出 `ValueError` 异常
```

#### 2.1.6 比较运算操作
两个序列支持比较运算符（<、<=、>、>=、==、!=），字符串比较按顺序逐个元素进行比较

#### 2.1.7 排序操作
```python
sorted(s,key = None,reverse = Fasle)
s.sort(key = None,reverse = Fasle)

'''
返回序列的排序列表
1.key：用于比较键值得函数
2.reverse：排序规则，reverse = True 降序，reverse = False 升序（默认）
'''
```
#### 2.1.8 内置函数 `any()` 和 `all()`
```python
any(s)  # 判断序列s中是否有元素为真，返回值为 bool值
all(s)  # 判断序列s中是否所有元素为真，返回值为 bool值
```

#### 2.1.9 拆分操作
_1. 变量个数和序列长度相等_
```python
变量1,变量2,... ,变量n = 序列或可迭代对象
```
如果序列长度和变量个数不相等，会抛出 `ValueError` 异常

_2. 变量个数和序列长度不等_

运用 `*元组变量` 的形式，将多个值作为元组赋值给元组变量
```python
first,*middles,last = 序列或可迭代对象
*firsts,middle,last = 序列或可迭代对象
first,middle,*lasts = 序列或可迭代对象
```
一个赋值语句中只能有一个 `*元组变量` ，否则会抛出 `SyntaxError` 异常
`*元组变量` 中元组变量输出为列表

_3.使用临时变量 `_`_

如果只需要部分数据，序列的其他位置可以使用临时变量 `_` 来接收


### 2.2 字符串类型 `str`
![](/python期末复习/图片文件/数据类型/字符串类型.svg?raw=true)
![](/图片文件/数据类型/字符串类型.svg?raw=true)

#### 2.2.1 字符串对象的创建
_1. 使用字串字面量_
使用单引号或双引号括起来的内容是字符串字面量，可以用四种方式定义字符串
```python
'' ：包含在单引号中的字符串，其中可以包含双引号
"" ：包含在双引号中的字符串，其中可以包含单引号
''' ：包含在三个单引号中的字符串，其中可以包含单引号和双引号，可以换行
""" ：包含在三个双引号中的字符串，其中可以包含单引号和双引号，可以换行
```
！两个紧邻的字符串，会自动连接起来

_2. 使用 `str()` 函数_
```python
str(x)  # 将x转换为字符串
```
_3. 使用 `repr()` 函数_
```python
repr(x)  # 将x转换为字符串，返回值为字符串的表示形式，包含单引号
```

#### 2.2.2 字符串的编码
字符串是由字符组成的序列，每个字符都有一个对应的编码值，字符串的编码是由字符的编码值组成的序列，每个字符的编码值都是一个整数，字符串的编码值可以用 `ord()` 函数获取，字符串的编码值可以用 `chr()` 函数转换为字符
```python
ord(c)  # 返回字符c的编码值，c为字符
chr(i)  # 返回编码值i对应的字符，i为整数
```

#### 2.2.3 字符串对象的方法
_1. 字符串类型判断_

| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- |
| `s.isdigit()`   | 判断字符串s是否全为数字    | `bool`值 |
| `s.isalpha()`   | 判断字符串s是否全为字母    | `bool`值 |
| `s.isalnum()`   | 判断字符串s是否全为数字或字母 | `bool`值 |
| `s.islower()`   | 判断字符串s是否全为小写字母  | `bool`值 |
| `s.isupper()`   | 判断字符串s是否全为大写字母  | `bool`值 |
| `s.isspace()`   | 判断字符串s是否全为空格    | `bool`值 |
| `s.isdecimal()` | 判断字符串s是否全为十进制数字 | `bool`值 |
|


_2. 字符串大小写转换_
| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- |
| `s.lower()`     | 将字符串s中的字母转换为小写字母  | `str`值 |
| `s.upper()`     | 将字符串s中的字母转换为大写字母  | `str`值 |
| `s.swapcase()`  | 将字符串s中的字母大小写转换    | `str`值 |
| `s.title()`     | 将字符串s中的单词首字母转换为大写字母 | `str`值 |
|`s.capitalize()` | 将字符串s中的第一个字母转换为大写字母 | `str`值 |
|

_3. 字符串的填充、空白和对齐_
| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- |
| `s.center(width[,fillchar])` | 将字符串s居中对齐，宽度为width，填充字符为fillchar | `str`值 |
| `s.ljust(width[,fillchar])`  | 将字符串s左对齐，宽度为width，填充字符为fillchar | `str`值 |
| `s.rjust(width[,fillchar])`  | 将字符串s右对齐，宽度为width，填充字符为fillchar | `str`值 |
| `s.zfill(width)`              | 将字符串s左对齐，宽度为width，填充字符为0 | `str`值 |
| `s.lstrip([chars])`           | 删除字符串s左侧的空白字符或指定字符 | `str`值 |
| `s.rstrip([chars])`           | 删除字符串s右侧的空白字符或指定字符 | `str`值 |
| `s.strip([chars])`            | 删除字符串s两侧的空白字符或指定字符 | `str`值 |
|

_4. 字符串测试、查找和替换_
| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- |
| `s.startswith(prefix[,start[,end]])` | 判断字符串s是否以prefix开头，start和end为可选参数，指定切片范围 | `bool`值 |
| `s.endswith(suffix[,start[,end]])`   | 判断字符串s是否以suffix结尾，start和end为可选参数，指定切片范围 | `bool`值 |
| `s.find(sub[,start[,end]])`          | 查找字符串s中sub第一次出现的位置，start和end为可选参数，指定切片范围 | `int`值 |
| `s.rfind(sub[,start[,end]])`         | 查找字符串s中sub最后一次出现的位置，start和end为可选参数，指定切片范围 | `int`值 |
| `s.index(sub[,start[,end]])`         | 查找字符串s中sub第一次出现的位置，start和end为可选参数，指定切片范围 | `int`值 |  
| `s.rindex(sub[,start[,end]])`        | 查找字符串s中sub最后一次出现的位置，start和end为可选参数，指定切片范围 | `int`值 |
| `s.replace(old,new[,count])`         | 将字符串s中的old替换为new，count为可选参数，指定替换次数 | `str`值 |
| `s.count(sub[,start[,end]])`         | 统计字符串s中sub出现的次数，start和end为可选参数，指定切片范围 | `int`值 |
|

_5. 字符串拆分和组合_

| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- |
| `s.split(sep[,maxsplit])` | 将字符串s按照sep分割，maxsplit为可选参数，指定最大分割次数 | `list`值 |
| `s.rsplit(sep[,maxsplit])` | 从右侧将字符串s按照sep分割，maxsplit为可选参数，指定最大分割次数 | `list`值 |
| `s.partition(sep)` | 将字符串s按照sep分割，返回一个三元组，包含分割后的三个部分 | `tuple`值 |
| `s.rpartition(sep)` | 从右侧将字符串s按照sep分割，返回一个三元组，包含分割后的三个部分 | `tuple`值 |
| `s.join(iterable)` | 将iterable中的元素连接起来，中间用s分隔 | `str`值 |
|
#### 2.2.4 字符串的格式化

_1. `%` 运算符形式_

* 形式
```python
格式化字符串 % (value1,value2,...)
```
* 格式说明符的语法
```python
% [(key)][flags][width][.precision]type
'''
key：可选参数，用于指定格式化字符串的键名
flags：可选参数，用于指定格式化字符串的标志
width：可选参数，用于指定格式化字符串的宽度
.precision：可选参数，用于指定格式化字符串的精度
type：可选参数，用于指定格式化字符串的类型
'''
```
* 格式化字符串的标识符（flags）：
```python
'-'：左对齐
'+'：显示正负号
'#'：显示进制前缀
'0'：用0填充
''：对于正值，不显示符号，对于负值，显示符号
```
* 格式化类型字符（type）
```python
%s：字符串
%d：有符号十进制整数
%u：无符号十进制整数
%o：无符号八进制整数
%x：无符号十六进制整数
%X：无符号十六进制整数，字母大写
%e：科学计数法表示的浮点数
%E：科学计数法表示的浮点数，字母大写
%f：浮点数
```

_2. `format()` 方法形式_
* 形式
```python
格式化字符串.format(value1,value2,...)
str.format(格式化字符串,value1,value2,...)
```
* 格式说明符的语法
```python
[[fill]align][sign]['#'][0][width][,][.precision][type]
```
```python
'''
fill：可选参数，用于指定填充字符，除了{}外
align：可选参数，用于指定对齐方式，包括<（左对齐）、>（右对齐）、^（居中对齐）、=（填充位于符号和数字之间）
sign：可选参数，用于指定正负号，包括“”（不显示符号）、“+”（显示正号）、“-”（显示负号）
'#'：可选参数，用于指定进制前缀
0：可选参数，用于指定填充字符
width：可选参数，用于指定格式化字符串的宽度
.precision：可选参数，用于指定格式化字符串的精度
type：可选参数，用于指定格式化字符串的类型
'''
```
type包括：
```python
'b'：二进制
'c'：字符
'd'：十进制
'o'：八进制
'x'：十六进制
'X'：十六进制，字母大写
'e'：科学计数法表示的浮点数
'E'：科学计数法表示的浮点数，字母大写
'f'：浮点数
'F'：浮点数，字母大写
'g'：通用格式
'G'：通用格式，字母大写
'n'：数字
'%'：百分比
'''
```
_3. `f-string` 形式_
* 形式
```python
f'格式化字符串{value1}{value2}...'
```

#### 2.2.5 转义字符
| 转义字符 | 含义 |
| :----- | :----- |
| `\n` | 换行 |
| `\t` | 制表符 |
| `\\` | 反斜杠 |
| `\'` | 单引号 |
| `\"` | 双引号 |
| `\r` | 回车 |
| `\b` | 退格 |
| `\f` | 换页 |
| `\v` | 垂直制表符 |
| `\a` | 响铃 |
| `\0` | 空字符 |
| 



### 2.3 列表类型 `list`
![](/python期末复习/图片文件/数据类型/列表数据类型.svg?raw=true)
![](/图片文件/数据类型/列表数据类型.svg?raw=true)

列表是一组有序项目的数据结构，是可变的数据类型

#### 2.3.1 列表对象的创建
_1. 使用方括号括起来的内容_
```python
[元素1,元素2,...,元素n]
```
_2. 使用 `list()` 函数_
```python
list(iterable)  # 将可迭代对象转换为列表
list()  # 创建一个空列表
```
#### 2.3.2 列表解析表达式
```python
[表达式 for 变量1 in 可迭代对象1 ··· for 变量n in 可迭代对象n]  # 生成一个新的列表，表达式中可以使用变量

[表达式 for 变量1 in 可迭代对象1 ··· for 变量n in 可迭代对象n if 条件]  # 生成一个新的列表，表达式中可以使用变量，条件为真时生成元素
```

#### 2.3.3 列表的序列操作
包含所有序列操作，以及以下操作：
* 通过索引删除
```python
del s[i]  # 删除列表s中第i个元素，i为索引，从0开始
```
* 通过切片删除
```python
del s[i:j]  # 删除列表s中从第i个元素到第j个元素，步长为1，i, j为索引，从0开始
```
#### 2.3.4 列表对象的方法
* 添加元素

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.append(x)`   | 将x添加到列表s的末尾 |
| `s.extend(iterable)` | 将可迭代对象iterable中的元素添加到列表s的末尾 |
| `s.insert(i,x)` | 将x插入到列表s的第i个位置，i为索引，从0开始 |
|

* 删除元素

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.pop([i])`    | 删除列表s中第i个元素，i为索引，从0开始，返回被删除的元素，如果i省略，默认删除最后一个元素 |
| `s.remove(x)`   | 删除列表s中第一个值为x的元素，如果x不在列表s中，会抛出 `ValueError` 异常 |
| `s.clear()`     | 删除列表s中的所有元素 |
|

* 查找元素

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.index(x[,start[,end]])` | 返回列表s中第一个值为x的元素的索引，start和end为可选参数，指定切片范围，如果x不在列表s中，会抛出 `ValueError` 异常 |
| `s.count(x)`    | 返回列表s中值为x的元素的个数 |
|

* 排序

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.sort(key = None,reverse = Fasle)` | 对列表s进行排序，key为可选参数，指定排序规则，reverse为可选参数，指定排序规则，reverse = True 降序，reverse = False 升序（默认） |
| `s.reverse()`   | 反转列表s中的元素 |
|

* 其他操作

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.copy()`      | 返回列表s的浅拷贝 |
|

* 连接列表的元素
```python
char = ' '  # 定义分隔符
char.join(s)  # 将列表s中的元素连接起来，中间用char分隔
```

### 2.4 元组类型 `tuple`
![](/python期末复习/图片文件/数据类型/元组数据类型.svg?raw=true)
![](/图片文件/数据类型/元组数据类型.svg?raw=true)

元组是一组有序序列，包含零个或多个对象引用，是不可变对象
#### 2.4.1 元组对象的创建
_1. 使用圆括号括起来的内容_
```python
(元素1,元素2,...,元素n)
```
圆括号可以省略，但是如果只有一个元素，必须加上逗号

_2. 使用 `tuple()` 函数_
```python
tuple(iterable)  # 将可迭代对象转换为元组
tuple()  # 创建一个空元组
```
#### 2.4.2 元组对象的方法

| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.count(x)`    | 返回元组s中值为x的元素的个数 |
| `s.index(x[,start[,end]])` | 返回元组s中第一个值为x的元素的索引，start和end为可选参数，指定切片范围，如果x不在元组s中，会抛出 `ValueError` 异常 |
|
### 2.5 字节序列 
![](/python期末复习/图片文件/数据类型/字节序列.svg?raw=true)
![](/图片文件/数据类型/字节序列.svg?raw=true)

字节序列（`bytes` 和 `bytearray`）是由8位字节数据组成的序列数据类型，包括不可变的 `bytes` 对象和可变的 `bytearray` 对象。
#### 2.5.1 字节序列对象的创建
_1. 使用字节字面量_
```python
b'字符串'  # 字符串中的字符必须是ASCII字符，每个字符对应一个8位字节
b"字符串"  
b'''字符串'''
b"""字符串"""
```
_2. 使用 `bytes()` 函数_
```python
bytes(iterable)  # 将可迭代对象转换为字节序列
bytes()  # 创建一个空字节序列
```
_3. 使用 `bytearray()` 函数_
```python
bytearray(iterable)  # 将可迭代对象转换为字节序列
bytearray()  # 创建一个空字节序列
```

如果iterable中包含非0<=x<256的整数，则会导致 `ValueError` 异常。

#### 2.5.2 字节编码和解码
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s.decode(encoding='utf-8',errors='strict')` | 将字节序列s解码为字符串，encoding为可选参数，指定解码方式，errors为可选参数，指定错误处理方式 |
| `s.encode(encoding='utf-8',errors='strict')` | 将字符串s编码为字节序列，encoding为可选参数，指定编码方式，errors为可选参数，指定错误处理方式 |
|

## 3.集合数据类型
![](/python期末复习/图片文件/数据类型/集合数据类型.svg?raw=true)
![](/图片文件/数据类型/集合数据类型.svg?raw=true)

集合数据类型是一组无序的、不重复的元素序列，包括可变的 `set` 对象和不可变的 `frozenset` 对象。

### 3.1 集合的定义
_1. 字面量_

可变集合通过花括号中用逗号分隔的项目定义，基本形式为：
```python
{x1[,x2,...,xn]}
```
* 其中 `x1,x2,...,xn` 为任意的可 `hash` 对象
* 集合中的元素不可重复且是无序的，其存储依据对象的 `hash` 码
* `hash` 码是根据对象的值计算出来的一个唯一值，一个对象如果定义了特殊方法`__hash__()`，则这个对象就是可 `hash` 对象
* 所有内置不可变对象都是可 `hash` 对象，而可变对象则不是可 `hash` 对象。
* 在集合中可以包含不可变对象，不能包含可变对象
* `{}` 表示空字典，空集合为 `set()`

_2. 利用内置函数_

```python
set(iterable)  # 将可迭代对象转换为集合
set()  # 创建一个空集合
frozenset(iterable)  # 将可迭代对象转换为不可变集合
frozenset()  # 创建一个空不可变集合
```


### 3.2 集合解析表达式
```python
{表达式 for 变量1 in 可迭代对象1 ··· for 变量n in 可迭代对象n} 
# 生成一个新的集合，表达式中可以使用变量

{表达式 for 变量1 in 可迭代对象1 ··· for 变量n in 可迭代对象n if 条件}  
# 生成一个新的集合，表达式中可以使用变量，条件为真时生成元素
```

### 3.3 集合的基本操作
#### 3.3.1 判断集合元素是否存在
```python
x in s  # 判断x是否在集合s中，返回值为bool值
x not in s  # 判断x是否不在集合s中，返回值为bool值
```

#### 3.3.2 集合的长度、最大值、最小值和元素和
```python
len(s)  # 返回集合s的长度
max(s)  # 返回集合s中的最大值
min(s)  # 返回集合s中的最小值
sum(s)  # 返回集合s中的元素之和，元素必须是数值类型
```

### 3.4 集合的运算
#### 3.4.1 并集、交集、差集和对称差集
| 运算符 | 功能描述 |
| :----- | :----- |
| `s1 \| s2 \| ···` | 并集 |
| `s1 & s2 & ···` | 交集 |
| `s1 - s2 - ···` | 差集 |
| `s1 ^ s2 ` | 对称差集 |
|

#### 3.4.2 集合的比较
| 运算符 | 功能描述 |
| :----- | :----- |
| `s1 == s2` | 相等 |
| `s1 != s2` | 不相等 |
| `s1 < s2` | s1是s2的纯子集 |
| `s1 <= s2` | s1是s2的子集 |
| `s1 >= s2` | s1是s2的纯超集 |
| `s1 > s2` | s1是s2的超集 |

### 3.5 可变集合的方法
#### 3.5.1 并集操作
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s1.update(s2)` | 并集（更新原集合） |
| `s1.union(s2)`        | 并集（返回新集合） |
| `s1 \|= s2` | 并集（更新原集合） |
|
#### 3.5.2 交集操作
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s1.intersection_update(s2)` | 交集（更新原集合） |
| `s1.intersection(s2)`        | 交集（返回新集合） |
| `s1 &= s2` | 交集（更新原集合） |

#### 3.5.3 差集操作
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s1.difference_update(s2)` | 差集（更新原集合） |
| `s1.difference(s2)`        | 差集（返回新集合） |
| `s1 -= s2` | 差集（更新原集合） |

#### 3.5.4 对称差集操作
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s1.symmetric_difference_update(s2)` | 对称差集（更新原集合） |
| `s1.symmetric_difference(s2)`        | 对称差集（返回新集合） |
| `s1 ^= s2` | 对称差集（更新原集合） |
|

#### 3.5.5 集合的增删改查
| 方法名称            | 功能描述            |
| :-------------- | :-------------- |
| `s1.add(x)` | 添加元素x |
| `s1.remove(x)` | 删除元素x，如果x不在集合s1中，会抛出 `KeyError` 异常 |
| `s1.discard(x)` | 删除元素x，如果x不在集合s1中，不会抛出异常 |
| `s1.pop()` | 随机删除一个元素，并返回被删除的元素，如果集合s1为空，会抛出 `KeyError` 异常 |
| `s1.clear()` | 删除集合s1中的所有元素 |
| `s1.copy()` | 返回集合s1的浅拷贝 |
| `s1.isdisjoint(s2)` | 判断集合s1和集合s2是否没有交集，如果没有交集，返回 `True`，否则返回 `False` |
|


## 4.字典数据类型
![](/python期末复习/图片文件/数据类型/字典数据类型.svg?raw=true)
![](/图片文件/数据类型/字典数据类型.svg?raw=true)

字典是一组键/值对的数据结构，每个键对应于一个值，键不能重复

### 4.1 字典的定义
_1. 字面量_
字典通过花括号中用逗号分隔的键/值对定义，基本形式为：
```python
{key1:value1[,key2:value2,...,keyn:valuen]}
```
* 其中 `key1,key2,...,keyn` 为任意的可 `hash` 对象，因此不可变对象可以作为键，而可变对象不能作为键
* 字典中的键不能重复，值可以重复

_2. 利用内置函数_
```python
dict()  # 创建一个空字典
dict(**kwargs)  # 创建一个字典，**kwargs为关键字参数，用于指定键/值对
dict(mapping)  # 创建一个字典，mapping为映射对象，用于指定键/值对
dict(iterable)  # 将可迭代对象转换为字典
```

### 4.2 字典解析表达式
```python
{key_expression:value_expression for key_expression,value_expression in iterable}  # 生成一个新的字典，key_expression和value_expression为表达式，iterable为可迭代对象
{key_expression:value_expression for key_expression in iterable1 for value_expression in iterable2 if condition} # 生成一个新的字典，key_expression和value_expression为表达式，iterable1和iterable2为可迭代对象，condition为条件表达式
```

### 4.3 字典的基本操作
#### 4.3.1 访问字典中的元素
通过键 `key` 来访问字典中的值 `value`，基本形式为：
```python
d[key]     # 返回键key对应的值value，如果key不在字典d中，会抛出 `KeyError` 异常
d[key] = value  # 将键key对应的值value设置为value，如果key不在字典d中，会抛出 `KeyError` 异常
del d[key]     # 删除键key对应的值value，如果key不在字典d中，会抛出 `KeyError` 异常
```

#### 4.3.2 字典的视图对象
| 方法名称            | 功能描述            | 返回值类型 |
| :-------------- | :-------------- | :---- | 
| `d.keys()`      | 返回字典d中的所有键 | dict_keys对象 | 
| `d.values()`    | 返回字典d中的所有值 | dict_values对象 |
| `d.items()`     | 返回字典d中的所有键/值对 | dict_items对象 |
|

在 Python 中，字典的这些方法实际返回的是视图对象（view objects），而非列表,但可以通过 `list()` 函数将其转换为列表。视图对象是动态的，会反映字典的实时变化，且具有高效的内存使用特性。

#### 4.3.3 字典的遍历
字典 `d` 和其视图 `d.keys()`、`d.values()`、`d.items()` 都是可迭代对象，可以使用 `for` 循环遍历
```python
for key in d:  # 遍历字典d中的所有键
    print(key)
for k,v in d.items():  # 遍历字典d中的所有键/值对
    print(k,v)
for (k,v) in d.items():  # 遍历字典d中的所有键/值对
    print(k,v)
```

#### 4.3.4 判断字典键是否存在
```python
key in d  # 判断键key是否在字典d中，返回值为bool值
key not in d  # 判断键key是否不在字典d中，返回值为bool值
```

#### 4.3.5 字典对象的长度比较
- 通过 `len()` 函数获取字典对象的长度，即字典中键/值对的个数，`min()` 和 `max()` 函数获取字典对象的最小值和最大值，即字典中键/值对的键的最小值和最大值，`sum()` 函数获取字典对象的元素和，即字典中键/值对的值的和，要求字典中的值必须是数值类型
- 支持比较运算符 `==`、`!=`、`<`、`<=`、`>`、`>=`

### 4.4 字典的方法

| 方法名称                           | 功能描述                                                            | 返回值类型             | 注意事项                      |
| :----------------------------- | :-------------------------------------------------------------- | :---------------- | :------------------------ |
| `d.get(key[, default])`        | 返回键 `key` 对应的值。若 `key` 不存在，返回 `default`（默认 `None`）。             | 值（value）          | 不修改原字典。                   |
| `d.setdefault(key[, default])` | 返回键 `key` 对应的值。若 `key` 不存在，插入 `key` 并设置值为 `default`（默认 `None`）。 | 值（value）          | 可能修改原字典。                  |
| `d.pop(key[, default])`        | 删除并返回键 `key` 对应的值。若 `key` 不存在且未提供 `default`，抛出 `KeyError`。      | 值（value）          | 删除操作。                     |
| `d.popitem()`                  | 删除并返回字典的最后一个键值对（Python 3.7+ 保证顺序）。若字典为空，抛出 `KeyError`。          | 元组 `(key, value)` | 删除操作，常用于逐次清空字典。           |
| `d.update([E, **F])`           | 用新键值对更新字典 `d`。参数可以是字典 `E` 或键值对 `**F`。无返回值。                      | `None`            | 原地修改原字典，存在的键会被覆盖。         |
| `d.clear()`                    | 删除字典中所有键值对。                                                     | `None`            | 原地操作。                     |
| `d.copy()`                     | 返回字典 `d` 的浅拷贝（新字典，但值为引用）。                                       | `dict`            | 嵌套对象需用 `copy.deepcopy()`。 |
|

## 5.特殊数据类型
| 类型名称                 | 描述           | 唯一值              |
| :------------------- | :----------- | :--------------- |
| `NoneType`           | 空值类型，表示没有值   | `None`           |
| `NotImplementedType` | 表示操作未实现的特殊类型 | `NotImplemented` |
| `EllipsisType`       | 表示省略的特殊类型    | `Ellipsis`       |
|

