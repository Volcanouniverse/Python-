## 程序流程控制
三种基本的控制结构：顺序结构、选择结构和循环结构

![](/python期末复习/图片文件/程序控制结构.png)
![](/图片文件/程序控制结构.png)
### 一. 程序的流程
#### **IPO：**
* **Input**：输入数据：交互输入、参数输入、随机数据输入、文件输入和网络输入
* **Process**：处理数据：计算问题的处理方法统称为“算法”
* **Output**：输出结果：控制台输出、图片输出、文件输出和网络输出等

### 二. 顺序结构
若程序中的语句按照各语句出现位置的先后次序执行，称之为顺序结构

### 三. 选择结构
选择结构可以根据条件来控制代码的执行分支，也称之为分支结构

#### 3.1 单分支结构
```python
if 条件语句表达式:
    语句/语句块
```
- __条件表达式__：可以是关系表达式、逻辑表达式和算术表达式等，其最后评价结果为 `bool` 值（ `True` 和 `False` ），当为 `True` 时才会执行语句
- __语句/语句块__：单个语句或者多个语句，多个语句缩进必须保持一致
#### 3.2 双分支结构
```python
if 条件表达式:
    语句/语句块1
else:
    语句/语句块2
```
条件表达式为True时执行语句/语句块1，否则执行语句/语句块2

```python
变量 = 条件为真时的值 if 条件表达式 else 条件为假时的值
```
#### 3.3 多分支结构
```python
if 条件表达式1:
    语句/语句块1
elif 条件表达式2:
    语句/语句块2
···
else:
    语句/语句块n
```
利用 `match` 语句：
```python
match 表达式:
    case 字面值 1 :
        子句 1
    case 字面值 2 :
        子句 2
    ···
```
#### 3.4 `if` 语句的嵌套
```python
if 条件表达式1:
    语句/语句块1
    if 条件表达式2:
        语句/语句块2
    elif 条件表达式3:
        语句/语句块3
    ···
    else:
        语句/语句块n
else:
    语句/语句块n+1
```
### 四. 循环结构
循环结构用来重复执行一条或者多条语句，使用循环结构可以减少源程序重复书写的工作量
#### 4.1 可迭代对象
__①__ __可迭代对象__：一次返回一个元素，适用于循环遍历\
* 序列（字符串、列表、元组）
* 字典
* 文件对象
* 迭代器对象
* 生成器函数


__②__ __迭代器__：可迭代对象的子类，用于遍历可迭代对象中的元素\
__③__ __生成器__：使用 `yield` 关键字定义的函数，返回一个迭代器对象
#### 4.2 `range` 对象
`range` 是一个迭代器对象，迭代时产生指定范围的数字序列
```python
range(start,stop[,step])
```
* `start`：可选参数，默认为0，序列的起始值
* `stop`：必选参数，序列的结束值
* `step`：可选参数，默认为1，序列的步长


#### 4.3 `for` 循环
`for` 循环用于遍历可迭代对象集合中的元素，并对集合中的每个元素执行一次循环体
```python
for 迭代变量 in 可迭代对象:
    语句/语句块
```

#### 4.4 `while` 循环
`while` 循环在开始前并不知道需要执行的次数
```python
while 条件表达式:
    语句/语句块
```
#### 4.5 循环嵌套
__循环嵌套__：在一个循环体内又包含另一个完整的循环结构\
多重循环的循环次数等于每一重循环次数的乘积

#### 4.6 `break` 和 `continue` 语句
1. `break` 语句：用于跳出当前循环体，执行循环体后面的语句\
    * 可以使用 `break` 语句跳出 `for` 和 `while` 的循环体
    * 当有嵌套循环时，`break` 语句只能跳出当前所在的循环体
2. `continue` 语句：用于结束当前循环，执行下一次循环
    * 可以使用 `continue` 语句跳过当前循环的剩余语句，继续下一次循环
    * 当有嵌套循环时，`continue` 语句只能跳过当前所在的循环的剩余语句，继续下一次循环

#### 4.7 `else` 语句
`else` 语句可以与 `for` 和 `while` 循环搭配使用，当循环正常结束时，执行 `else` 语句，如果循环被 `break` 语句终止，不会执行 `else` 语句
```python
# for 循环
for 迭代变量 in 可迭代对象:
    语句/语句块
else:
    语句/语句块
# while 循环
while 条件表达式:
    语句/语句块
else:
    语句/语句块
```
#### 4.8 死循环
如果 `while` 循环中循环控制条件一直为真，则循环将会无限继续\
在程序的循环体中，插入调试输出语句 `print()` ，可以判断程序是否为死循环\
可以用 `Ctrl + C` 终止程序的运行

#### 4.9 三个特殊函数
`enumerate()` 函数：用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标，一般用在 `for` 循环中
```python
enumerate(可遍历对象,start=0)
```

`zip()` 函数：用于将多个可遍历的数据对象（如列表、元组或字符串）组合为一个元组序列，一般用在 `for` 循环中
```python
zip(可遍历对象1,可遍历对象2,···)
```
`range()` 函数：用于生成一个整数序列，一般用在 `for` 循环中
```python
range(start,stop[,step])
```
`map()` 函数：用于将一个函数应用于一个可迭代对象的每个元素，返回一个新的可迭代对象，一般用在 `for` 循环中
```python
map(函数,可迭代对象)
```
