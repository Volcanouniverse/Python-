# 面向对象程序设计

## 一.面向对象概述
### 1.1 面向过程和面向对象
#### 1.1.1 面向过程
- 需要求解的问题域被视为一个待处理的大过程，经过分析处理之后，根据问题的复杂程度，将整个系统分解为一个个易于处理的子过程
- 面向过程方法将过程作为系统的主要构件，数据和对数据的操作分离
- 对需求变化的适应能力差，并且在处理大型、复杂问题时，系统维护困难

#### 1.1.2 面向对象
- 直接以问题域中的事物（对象）为中心来思考问题，把对象作为系统的基本构成单位，又通过将对象之间的相互作用、相互联系映射到计算机系统来模拟现实客观世界
- 面向对象把数据和对数据的处理看成一个整体—对象，其概念和处理方法比较符合人类认识问题、分析问题和解决问题的一般规律
- 优点
   - 自然高效
   - 易于重复使用
   - 便于维护

### 1.2 对象的定义
1. 从概念层面上讲：某种事物的抽象（功能）
    - 数据抽象：定义对象的属性
    - 过程抽象：定义对象的操作
2. 从规格层面上讲：一系列可以被其他对象使用的公共接口（对象交互）
3. 从语言实现层面：对象封装了数据和代码

### 1.3 面对对象的基本特征
#### 1.3.1 封装
- 把客观事物抽象并封装成对象，即将数据成员、属性、方法和事件等集合在一个整体内
- 保证了对象的独立性
- 防止外部程序破坏对象的内部数据
- 便于程序的维护和修改
#### 1.3.2 继承
- 代码重用的主要方法
- 允许使用现有类的功能
- 在无需重新改写原来的类的情况下对这些功能进行扩展
- 避免代码复制和相关的代码维护等问题
#### 1.3.3 多态性
- 子类具有两个有效类型：子类的类型和继承的基类的类型
- 多态性是指对象可以表示多个类型的能力
- 允许每个对象以自己的方式去响应共同的消息

### 1.4 面向对象程序设计（OOP）
- 主要针对大型软件设计而提出，使得软件设计更加灵活，能够很好地支持代码复用和设计复用，代码具有更好的可读性和可扩展性，大幅度降低了软件开发的难度。
- 将数据以及对数据的操作封装在一起，组成一个相互依存、不可分割的整体（对象），不同对象之间通过消息机制来通信或者同步。
- 对相同类型的对象进行分类、抽象后，得出共同的特征而形成了类，面向对象程序设计的关键就是如何合理地定义这些类并且组织多个类之间的关系


## 二.类对象和实例对象
- 类是一个数据结构，定义了数据类型的数据（属性）和行为（方法）
- 对象是类的具体实体，即类的实例
- 类称为类对象，类的实例称为实例对象

### 2.1 类对象
#### 2.1.1 shengmingfangshi 
```python
class 类名(基类名):
    # 类变量
    类变量名 = 初始值

    def 方法名(self,参数表):
        '''
        方法的文档字符串（可选）
        '''
        # 方法体
        pass
```
类名为有效的标识符，一般为多个单词组成的名称，每个单词除第一个字母大写外，其余的字母全部为小写

### 2.1.2 类的成员
含义：定义在类体中的元素
1. 类的主要成员：描述状态的数据成员（属性）和描述操作的函数成员（方法）
- 实例属性--属于对象的数据成员
   - 一般在构造方法`__init__()`中定义，也可以在其他成员方法中定义，在定义和实例方法中访问数据成员时以`self`为前缀，同一个类的不同对象（实例）的数据成员之间互不影响
   - 在主程序或类的外部，对象数据成员属于实例（对象），只能通过对象名访问
- 类属性--属于类的数据成员
   - 是该类所有对象共享的，不属于任何一个对象，在定义类时，这类数据成员一般不在任何一个成员方法的定义中
   - 类数据成员属于类，可以通过类名或对象名访问

2. 从访问控制方式上：
- __私有成员__ ：在类的外部不能直接访问，一般是在类的内部进行访问和操作，或者在类的外部通过调用对象的公有成员方法来访问；Python没有严格意义上的私有成员
- __公有成员__ ：可以公开使用的，既可以在类的内部进行访问，也可以在类的外部使用

3. 以下划线开头的变量名和方法名
- `__xxx__` ： 系统定义的特殊成员
- `__xxx` ： 私有成员，只有在类的内部才能访问，外部不能直接访问这类对象，但是在类的外部可以通过 `对象名.__类名__xxx` 这样的特殊方式来访问

4. 特殊函数：构造函数和析构函数
- `__init__()` ： 在创建对象时被自动调用和执行，一般用来为数据成员设置初值或者进行其他必要的初始化操作，如果用户没有定义构造函数，Python会提供一个默认的构造函数
- `__del__()` ： 在删除对象和收回对象空间时被自动调用和执行，一般用来释放对象占用的资源
- 如果用户没有定义构造函数和析构函数，Python会提供一个默认的构造函数和析构函数


### 2.2 实例对象
- 类是抽象的，如果要使用类定义的功能，就必须实例化类（创建类的对象）
- 创建实例对象后，可以使用 `.` 运算符来调用其成员
          `创建类的对象 <=> 创建类的实例 <=> 实例化类` 

1. 创建和调用实例对象
```python
# 创建实例对象
anObject = 类名(参数列表)
# 调用实例对象
anObject.对象函数
anObject.对象属性
```
- `anObject = 类名(参数列表)` 创建类类名的实例对象并绑定到变量 `anObject`
- 类对象是 __可调用对象__：创建类的实例对象时只需像调用函数一样调用类对象并传递参数,可调用内置类对象包括：`bool`，`int`，`str`，`list`，`dict`，`set` 等

2. 可以使用内置函数 `isinstance()` 来测试一个对象是否为某个类的实例，或者使用内置函数 `type()` 来查看数据类型
```python
# 使用instance()方法
isinstance(object,classinfo)
# 使用type()方法
type(object)
```
- `object`：需要检查的对象
- `classinfo`：一个类或者一个包含多个类的元组
- 如果 `object` 是 `classinfo` 中的任意一个类的实例，或者其子类的实例，`isinstance()` 返回 `True`，否则返回 `False`

## 三.属性
- 属性：类的数据成员，即在类中定义的成员变量（域），用来存储描述类的特征的值
- 访问方式：既可以被该类中定义的方法访问，也可以通过类对象或实例对象进行访问
- 属性实际是在类中的变量，建议在类定义的开始位置初始化类属性，或者在构造函数(`__init__()`)中初始化实例属性

### 3.1 实例对象属性
- 实例对象属性：通过 `self.变量名` 定义的属性，也被称为实例对象变量
- 访问方式：在类的内部通过 `self` 访问，在外部通过对象实例访问

#### 3.1.1 定义实例属性
```python
class MyClass:
    def __init__(self, value):
        self.instance_attribute = value  # 定义实例属性
```
- `self` 是类实例的引用，用于访问实例属性和方法。
- `instance_attribute` 是实例属性的名称。
- `value` 是传递给 `init 方法的参数值，用于初始化实例属性。

#### 3.1.2 使用实例属性
1. 在其他实例函数中通过 `self` 访问
```python
self.实例变量名 = 值       # 写入
self.实例变量名            # 读取
```
2. 在创建对象实例后通过对象实例来访问
```python
obj1 = 类名()           # 创建实例对象
obj1.实例变量名 = 值     # 写入
obj1.实例变量名          # 读取
```
3. 动态添加实例属性
```python
class MyClass:
    def __init__(self):
        pass

# 创建类的实例
obj = MyClass()

# 动态添加实例属性
obj.new_attribute = "Hello"
print(obj.new_attribute)  # 输出：Hello
```
### 3.2 类对象属性
- 类属性是类本身的成员变量，在类中成员函数外部定义
- 如果类属性名和实例属性名不冲突，也可以通过对象名来引用类属性
- 类属性是被类的所有对象共享的，实例属性只被自己的对象所拥有
- 利用类属性的共享性，可以实时获得该类的对象数量，并且可以控制该类可以创建的对象的最大数量
1. 初始化——在类体中
```python
class MyClass:
    类变量名 = 初始值
```
2. 访问——在其类定义的方法中或者外部代码中通过类名访问
```python
类名.类变量名 = 值       # 写入
类名.类变量名           # 读取
```
类属性可以通过 `obj.属性名` 访问，相当于该实例 `obj` 的实例属性，不建议使用


### 3.3 综合应用举例
```python
class 类名:
    # 定义类属性
    类属性名1 = 初始值1
    类属性名2 = 初始值2

    def __init__(self,参数1,参数2,···):
        # 定义实例属性
        self.实例属性名1 = 参数1
        self.实例属性名2 = 参数2
        ···

# 创建类的实例
实例对象名 = 类名(参数1,参数2,···)

# 访问类属性
值1 = 类名.类属性名1
值2 = 类名.类属性名2

# 访问实例属性
值3 = 实例对象名.实例属性名1
值4 = 实例对象名.实例属性名2

# 修改类属性
类名.类属性名1 = 新值1
类名.类属性名2 = 新值2

# 修改实例属性
实例对象名.实例属性名1 = 新值3
实例对象名.实例属性名2 = 新值4
```
## 四.方法

### 4.1 实例方法（对象实例方法）

1. 所有实例方法都必须至少有一个名为 `self` 的参数，并且必须是方法的第一个形参，`self` 参数代表当前对象。
```python
def 实例方法名(self,[形参列表]):
   函数体
```
2. 在实例方法中访问实例成员时需要以 `self` 为前缀。
```python
def 实例方法名(self, [形参列表]):
    # 访问实例属性
    self.实例属性名
    
    # 调用其他实例方法
    self.其他方法名()
    
    # 修改实例属性
    self.实例属性名 = 新值
```
3. 如果在外部通过对象名调用实例方法，不需要为这个参数指定实参。
```python
# 创建对象
实例对象名 = 类名()

# 通过对象调用方法（隐式传递self）
实例对象名.实例方法名(实参1, 实参2, ...)
```
4. 如果在外部通过类名调用公有实例方法，需要显式为该方法的 `self` 参数传递一个对象名，用来明确指定访问哪个对象的成员。
```python
# 创建对象
实例对象名 = 类名()

# 通过类调用方法（显式传递self）
类名.实例方法名(实例对象名, 实参1, 实参2, ...)
```
### 4.2 类方法
#### 4.1.1 概述
1. 类方法：属于类本身的方法
2. 类方法和静态方法
- 静态方法和类方法都可以通过类名和对象名调用，但不能直接访问属于对象的成员，只能访问属于类的成员。
- 静态方法和类方法不属于任何实例，不会绑定到任何实例，当然也不依赖于任何实例的状态，与实例方法相比能够减少很多开销。
- 类方法一般以 `cls` 作为类方法的第一个形式参数表示该类自身，在调用类方法时不需要为该参数传递值，静态方法则可以不接收任何参数。
- 类方法用装饰器 `@classmethod` 来定义，静态方法用装饰器 `@staticmethod` 
#### 4.1.2 综合语法
```python
class 类名:
    @staticmethod  # 必须加这个装饰器
    def 静态方法名(参数1, 参数2):  # 没有 self/cls 参数
        # 只能用传入的参数，不能访问类或实例的属性
        函数体1
    @classmethod
    def 类方法名(cls, 其他参数1, 其他参数2):  # 第一个参数是 cls（代表类本身）
        函数体2

# 调用静态方法
类名.静态方法名(参数1, 参数2)

# 调用类方法
类名.类方法名(其他参数1, 其他参数2)
```
#### 4.3 `__init__()` 方法
1. `__init__()` 方法是一个特殊的方法，用于在创建对象时进行初始化操作。
2. 当创建一个对象时，Python会自动调用 `__init__()` 方法，并将该对象作为第一个参数传递给 `__init__()` 方法。
3. 不返回任何值

```python
class 类名:
    def __init__(self, 参数1, 参数2, ...):
        # 初始化操作
        self.属性1 = 参数1
        self.属性2 = 参数2
        ...
```

#### 4.4 `__del__()` 方法
1. `__del__()` 方法是一个特殊的方法，用于在对象被销毁时进行清理操作。
2. 当对象不再被引用时，Python会自动调用 `__del__()` 方法，并将该对象作为第一个参数传递给 `__del__()` 方法。
```python
class 类名:
    def __del__(self):
        # 清理操作
        # 释放资源
        # 执行其他必要的操作
        pass
```

### 4.5 `__new__()` 方法
1. `__new__()` 方法是一个特殊的方法，用于在创建对象时进行初始化操作。
2. 当创建一个对象时，Python会自动调用 `__new__()` 方法，并将该对象作为第一个参数传递给 `__new__()` 方法。
```python
class 类名:
    def __new__(cls, *args, **kwargs):
        # 创建对象并返回
        return super().__new__(cls)
```

### 4.6 私有方法和公有方法
1. 私有方法：只能在类的内部调用，不能在类的外部调用。
2. 公有方法：可以在类的内部和外部调用。
3. 私有方法和公有方法的区别在于方法名的前缀，私有方法以 `__` 开头，公有方法不以 `__` 开头。

### 4.7 抽象方法和抽象类
- 包含抽象方法的类是抽象类，不能创建抽象类的对象。
- 抽象方法一般在抽象类中定义，并且要求在派生类中必须重新实现，否则不允许派生类创建实例。
- 一般，把类族中的顶层类定义为抽象类，确定所有类的共性。
