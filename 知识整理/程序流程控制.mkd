# 程序流程控制
三种基本的控制结构：顺序结构、选择结构和循环结构

![](/python期末复习/图片文件/程序控制结构.png)
![](/图片文件/程序控制结构.png)
## 一. 程序设计和计算问题
### 1.1 概述
#### 1.1.1 计算问题
- 程序设计的核心目标是解决计算问题
- 计算问题是指那些可以通过明确的步骤和规则，利用计算机才进行处理的问题
- __特点__
   * 明确的输入和输出：问题有清晰的输入数据，并需要得到特定的输出结果
   * 可分解性：问题可以被分解成更小的子问题，每个子问题都能够独立解决
   * 可计算性：问题可以通过算法和程序解决
- __分类__
   * 简单计算问题：问题规模小，解决方法直观
   * 复杂计算问题：问题规模大，解决方法需要更复杂的算法和数据结果
   * 开放性问题：问题没有明确的解决方法，需要创新和探索
#### 1.1.2 程序设计和计算问题的关系
- __程序设计是解决计算问题的工具__ ：通过编写程序，我们可以将计算的解决方法自动化
- **计算问题是程序设计的驱动力** ：计算问题的复杂性和多样性推动了程序设计方法和工具的发展
- **程序设计的核心是算法** ：算法是解决计算问题的关键，程序设计则是将算法转化为可执行代码的过程

### 1.2 利用程序解决计算问题的步骤
#### 1.2.1 一般步骤
- *问题分析* ：明确问题的输入、输出和约束条件
- *算法设计* ：设计解决问题的步骤和方法
- *编写代码* ：使用编程语言将算法转化为计算机可以执行的代码
- *调试和测试* ：运行程序，检查是否能够正确解决问题
- *优化和维护* ：优化代码的性能和可读性，并根据需求变化进行维护

#### 1.2.2  利用**IPO**
__1.__ IPO方法是一种简单而有效的程序设计思路，特别适合初学者理解和解决计算问题

__2.三个部分__

* **Input**：输入数据：交互输入、参数输入、随机数据输入、文件输入和网络输入
    * 输入数据类型：明确输入数据的类型是文本、数字or文件
    * 输入数据来源：数据可能来源于用户输入、文件、数据库或其他程序
* **Process**：处理数据：计算问题的处理方法统称为“算法”
    * 算法是解决问题的一系列步骤，是一个程序的灵魂
    * 逻辑结构：使用控制结构（顺序、分支和循环）来阻止算法的逻辑
    * 数据结构：选择合适的数据结构来存储和处理数据
* **Output**：输出结果：控制台输出、图片输出、文件输出和网络输出等
    * 输入格式：确定输出的格式，如文本、图标和报告等
    * 输出目的地：决定输出的目标位置，如屏幕、文件和打印机

**3.优势**

* 简单直观
* 结构化
* 通用性强

## 二. 顺序结构
若程序中的语句按照各语句出现位置的先后次序执行，称之为顺序结构

## 三. 选择结构
选择结构可以根据条件来控制代码的执行分支，也称之为分支结构

### 3.1 单分支结构
```python
if 条件语句表达式:
    语句/语句块
```
- __条件表达式__：可以是关系表达式、逻辑表达式和算术表达式等，其最后评价结果为 `bool` 值（ `True` 和 `False` ），当为 `True` 时才会执行语句
- __语句/语句块__：单个语句或者多个语句，多个语句缩进必须保持一致
### 3.2 双分支结构
```python
if 条件表达式:
    语句/语句块1
else:
    语句/语句块2
```
条件表达式为True时执行语句/语句块1，否则执行语句/语句块2

```python
变量 = 条件为真时的值 if 条件表达式 else 条件为假时的值
```
### 3.3 多分支结构
```python
if 条件表达式1:
    语句/语句块1
elif 条件表达式2:
    语句/语句块2
···
else:
    语句/语句块n
```
利用 `match` 语句：
```python
match 表达式:
    case 字面值 1 :
        子句 1
    case 字面值 2 :
        子句 2
    ···
```
### 3.4 `if` 语句的嵌套
```python
if 条件表达式1:
    语句/语句块1
    if 条件表达式2:
        语句/语句块2
    elif 条件表达式3:
        语句/语句块3
    ···
    else:
        语句/语句块n
else:
    语句/语句块n+1
```
## 四. 循环结构
循环结构用来重复执行一条或者多条语句，使用循环结构可以减少源程序重复书写的工作量
### 4.1 可迭代对象
__①__ __可迭代对象__：一次返回一个元素，适用于循环遍历\
* 序列（字符串、列表、元组）
* 字典
* 文件对象
* 迭代器对象
* 生成器函数


__②__ __迭代器__：可迭代对象的子类，用于遍历可迭代对象中的元素\
__③__ __生成器__：使用 `yield` 关键字定义的函数，返回一个迭代器对象
### 4.2 `range` 对象
`range` 是一个迭代器对象，迭代时产生指定范围的数字序列
```python
range(start,stop[,step])
```
* `start`：可选参数，默认为0，序列的起始值
* `stop`：必选参数，序列的结束值
* `step`：可选参数，默认为1，序列的步长


### 4.3 `for` 循环
`for` 循环用于遍历可迭代对象集合中的元素，并对集合中的每个元素执行一次循环体，一般应用于循环次数可以提前确定的场合，尤其适用于枚举或遍历序列或迭代对象中元素的场合
```python
for 迭代变量 in 可迭代对象:
    语句/语句块
```

### 4.4 `while` 循环
`while` 循环在开始前并不知道需要执行的次数，一般适用于循环次数难以提前确定的场合
```python
while 条件表达式:
    语句/语句块
```
这是一种当性循环，即当某个条件满足时重复执行一组操作，直至条件不满足
### 4.5 循环嵌套
__循环嵌套__：在一个循环体内又包含另一个完整的循环结构\
多重循环的循环次数等于每一重循环次数的乘积

### 4.6 `break` 和 `continue` 语句
1. `break` 语句：用于跳出当前循环体，执行循环体后面的语句\
    * 可以使用 `break` 语句跳出 `for` 和 `while` 的循环体
    * 当有嵌套循环时，`break` 语句只能跳出当前所在的循环体
2. `continue` 语句（继续语句）：用于结束当前循环，执行下一次循环
    * 可以使用 `continue` 语句跳过当前循环的剩余语句，继续下一次循环
    * 当有嵌套循环时，`continue` 语句只能跳过当前所在的循环的剩余语句，继续下一次循环

### 4.7 `else` 语句
`else` 语句可以与 `for` 和 `while` 循环搭配使用，当循环正常结束时，执行 `else` 语句，如果循环被 `break` 语句终止，不会执行 `else` 语句
```python
# for 循环
for 迭代变量 in 可迭代对象:
    语句/语句块
else:
    语句/语句块
# while 循环
while 条件表达式:
    语句/语句块
else:
    语句/语句块
```
### 4.8 死循环
如果 `while` 循环中循环控制条件一直为真，则循环将会无限继续\
在程序的循环体中，插入调试输出语句 `print()` ，可以判断程序是否为死循环\
可以用 `Ctrl + C` 终止程序的运行

### 4.9 三个特殊函数
`enumerate()` 函数：用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标，一般用在 `for` 循环中
```python
enumerate(可遍历对象,start=0)
```

`zip()` 函数：用于将多个可遍历的数据对象（如列表、元组或字符串）组合为一个元组序列，一般用在 `for` 循环中
```python
zip(可遍历对象1,可遍历对象2,···)
```
`range()` 函数：用于生成一个整数序列，一般用在 `for` 循环中
```python
range(start,stop[,step])
```
`map()` 函数：用于将一个函数应用于一个可迭代对象的每个元素，返回一个新的可迭代对象，一般用在 `for` 循环中
```python
map(函数,可迭代对象)
```
