# 文件
## 一.文件和文件对象
### 1.1 文件对象和`open`函数
#### 1.1.1 基本语法格式
```python
f = open(file,mode = 'r',buffering = -1,encoding = None)
```
- `file` 是要打开或创建的文件名称，如果文件不在当前的路径中，需要指出具体的路径
- `mode`是打开文件的模式
- `buffering`表示是否使用缓存（默认为-1，表示使用系统默认的缓冲区大小）
- `encoding`是文件的编码
#### 1.1.2 `open()` 函数
`open()` 函数返回一个文件对象 `f`

| 模式 | 说明 |
| :--- | :--- |
| `'r'` | 以只读方式打开文件（默认方式），文件指针定位在文件头的位置，若文件不存在则会报错。 |
| `'w'` | 以只写方式打开文件，如果文件存在则打开文件，清空文件内容，从文件头开始写入；如果文件不存在，则创建新文件，打开并准备写入操作。 |
| `'t'` | 以文本格式打开文件（默认值）。 |
| `'b'` | 以二进制格式打开文件，一般用于非文本格式的文件，例如图片文件、音频文件和视频文件。 |
| `'x'` | 创建新文件，如果文件存在，则导致 `FileExistError`。 |
| `'a'` | 以追加方式打开文件，只允许写入操作，不允许读取操作。如果文件存在，则将文件指针定位在文件尾，新的内容被追加在已有内容之后；如果文件不存在，则创建新文件后打开并进行写入。 |
| `'+'` | 打开文件后进行更新（可读可写），不能单独使用。 |

_说明_
- `open()`函数默认的打开模式为`'rt'`，即文本读取模式
- `'r+'`：打开文件用于读写，如果文件存在则打开文件，将文件指针定位在文件头，新写入的内容在原有内容的前面。如果文件不存在则会报错
- `'w+'`：打开文件用于读写，如果文件存在则打开文件并清空文件原有内容，进入编辑模式；如果文件不存在则创建一个新的文件
- `a+`：以追加模式打开文件用于读写，文件指针定位在文件尾；如果文件不存在则创建一个
- 以上模式默认为文本模式`'t'`

#### 1.1.3 文件操作的框架
```python
try:
   f = open(file,mode)        # 打开文件
   # 操作打开的文件
except:                       # 捕获异常
   # 发生异常时执行的操作
finally:
   f.close()                  # 关闭打开的文件
```
### 1.2.文件的打开、写入、读取和关闭
|操作|说明|
|---|---|
|`open()`|创建或打开文件对象|
|`wirte()` \ `writelines()`|写入字符串到文本文件|
|`read()` \ `readline()`|读取文本文件的内容|
|`close()`|关闭文件|


文本文件对象是可迭代对象，也可以使用for循环语句遍历所有的行

#### 1.3.`with` 语句和上下文管理协议
__1. 可以通过`with`语句实现上下文管理协议的对象__
```python
with context[as var]
     操作语句
```
- `with`语句定义了一个上下文
- 在执行`with`语句时，首先调用上下文对象`context`的`__enter__()`，其返回值赋值给`var`
- 在离开`with`语句块时，最后调用`context`的`__exit__()`，确保释放资源

__2.文件对象支持使用`with`语句，确保打开的文件自动关闭__

基本语法格式为：
```python
with open(file,mode) as f:
     # 操作打开的文件
```
## 二. 文本文件的写入、读取和编码
### 2.1 概述
-  使用`open()`函数打开或者创建一个文件时，其默认的打开模式为只读文本文件；文本文件用于储存文本字符串，默认编码为`Unicode`
- 存储在文本文件中的数据可以是结构化数据（如一维数据或二维数据）
- 一般地，结构化数据文件的存储通常使用特殊分隔符
- __处理一维数据文件的方式__
```python
ls = []  # 初始化列表用于存储文件数据
with open('filename', 'r') as f:  # 打开文件，模式为只读
    ls = f.read().strip().split(sep)  # sep 是分隔符，例如 ',' 或 ';'
```
`.strip('\n')`去除字符串首尾的换行符 `\n`，可以简化为 `.strip()`，因为默认会去除首尾的空白字符（包括空格、换行符等）。

- __处理二维数据文件的方式__
```python
# 初始化二维列表用于存储文件数据
data = []

# 打开文件并逐行读取
with open('filename', 'r') as f:
    for line in f:
        # 去除每行的首尾空白字符（包括换行符）
        line = line.strip()
        # 将每行按指定分隔符分割为列表（默认为空白字符分割）
        row = line.split(sep)  # sep 是分隔符，例如 ',' 或 '\t'
        # 将分割后的行列表添加到二维列表中
        data.append(row)
```        
### 2.2 文本文件的写入
#### 2.2.1 创建或打开文件对象
通过内置函数`open()`可以创建或打开文件对象，并且可以指定覆盖模式（文件存在时）、编码和缓存大小
#### 2.2.2 写入字符串到文本文件
```python
f.wirte(s)                    # 把字符串s写入文件f
f.writelines(lines)           # 依次把列表lines中的各字符串写入文件f
f.flush()                     # 把缓冲的数据更新到文件中
```
实例方法`write()`和`writelines()`不会添加换行字符，但可以通过添加`'\n'`实现换行
```python
f.write('s\n')
```
#### 2.2.3 关闭文件
__1. 使用`try···except···finally···`框架__
```python
f = open('filename','w')               # 打开文件
try:
    # 文件处理操作
finally:
    f.close()                          # 关闭文件
```
__2.使用`with()`语句，可以保证系统自动关闭打开的流__
```python
with open('filename','w') as f:
    # 文件处理操作
```
### 2.3 文本文件的读取
#### 2.3.1 打开文件对象
```python
open('filename','r')     # 打开文件，若文件不存在则导致FileNotFoundError2
```
#### 2.3.2 从打开的文本文件中读取字符数据
```python
f.read()         # 从f中读取剩余内容直至文件结尾，返回一个字符串
f.read(n)        # 从f中读取最多n个字符并返回一个字符串，如果n为负数或为None，读取直至文件末尾
f.readall()      # 从f中读取全部内容，返回一个字符串
f.readline()     # 从f中读取一行内容，返回一个字符串
f.readlines()    # 从f中读取剩余多行内容，放回一个列表
```
除此之外，文件可以直接迭代
#### 2.3.3 关闭文件
`close()`或`with`语句

## 三. 二进制文件的写入和读取
指定打开模式为`'b'`，可以打开二进制文件，二进制文件可以直接存储字节码，广泛用于存储各种程序数据
### 3.1 二进制文件的写入
#### 3.1.1 创建或打开文件对象
```python
f1 = open('file1','wb')     # 创建或打开file1
f2 = open('file2','xb')     # 创建文件file2，若file2已存在，则导致FileExistError
f3 = open('file3','ab')     # 创建或打开file3，附加模式
```
#### 3.1.2 写入字节数据到二进制文件
```python
f.write(b)      # 将字节数据b写入二进制文件f，返回实际写入的字节数
f.flush()       # 将缓冲的数据更新到文件中
```
#### 3.1.3 关闭文件
`close()`或`with`语句

### 3.2 二进制文件的读取
#### 3.2.1 打开文件对象
```python
open('filename','rb')      # 打开filename，若文件不存在，则导致FileNotFoundError
```
#### 3.2.2 从打开的文本文件中读取字符数据
```python
f.read()        # 从f中读取剩余内容直至文件结尾，返回一个bytes对象
f.read(n)       # 从f中读取至多n个字节，返回一个bytes对象；如果n为负数或None，则读取直至文件结尾
f.readinto(b)   # 从f中读取至多len(b)个字节到bytes对象b
```
#### 3.2.3 关闭文件
`close()`或`with`语句

## 四. 随机文件的写入和读取
### 4.1 概述
文件对象支持`seek()`方法，可以通过字节偏移量将写/读取位置移动到文件中的任意位置，从而实现文件的随机访问，基本语法格式为：
```python
seek(offset,whence = os.SEEK_SET)
```
- `offset`为移动的字节偏移量:正数向前移动（文件末尾的方向），负数向后移动（文件开头的方向）
- `whence`为相对参考点，其中：
   -  `os.SEEK_SET`或`0`：文件开始
   -  `os.SEEK_CUR`或`1`：当前位置
   -  `os.SEEK_END`或`2`：文件结束

- 通常是针对二进制文件而言的
### 4.2 创建或打开随机文件
指定打开模式为`'+'`
```python
f1 = open('file1','w+b')     # 创建或打开file1
f2 = open('file2','x+b')     # 创建文件file2，若file2已存在，则导致FileExistError
f3 = open('file3','a+b')     # 创建或打开file3，附加模式
```
### 4.3 定位
```python
# 从文件开头移动到第5个字节
f.seek(5, os.SEEK_SET)  # 或 f.seek(5, 0)
position = f.tell()   # 当前指针位置
```
### 4.4 写入/读取数据
```python
f.write(b'hello')     # 写入字节数据
f.read(n)             # 读取n个字节
```
### 4.5 关闭文件
`close()`或`with`语句

## 五. CSV文件的读取和写入
### 5.1 概述
CSV是逗号分隔符文本格式，常用于Excel和数据库的数据导入和导出，Python标准库模块`csv`提供了读取和写入CSV格式文件的对象
### 5.2 `csv.reader`对象和CSV文件的读取
__1. `csv.reader`对象用于从CSV文件读取数据（格式为列表对象）__

构造函数为
```python
csv.reader(csvfile,dialect = 'excel',**fmtparams)
```
- `csvfile`：
  - 必需参数。
  - 一个文件对象或任何其他支持迭代的文件类对象（例如 `open()` 函数返回的对象）。
  - 文件必须以文本模式打开（通常是 `'r'` 或 `'r+'`）。
- `dialect`：
  - 可选参数，默认值为 `'excel'`。
  - 指定 CSV 文件的格式风格。`csv` 模块预定义了几种方言（`dialects`），例如：
     - `excel`：默认方言，适合普通的 CSV 文件。
     - `excel-tab`：使用制表符（`\t`）作为分隔符。
     - `unix`：适合 Unix 风格的 CSV 文件，行结束符为 `\n`。
- `**fmtparams`：
  - 可选参数。
  - 用于指定格式化参数，这些参数会覆盖方言中的默认设置。
  - 常见的格式化参数包括：
    - `delimiter`：字段分隔符，默认为逗号（`,`）。
    - `quotechar`：引用字符，默认为双引号（`"`）。
    - `lineterminator`：行结束符，默认为换行符（`\n`）。
    - `escapechar`：转义字符。
    - `doublequote`：是否使用双引号来转义引用字符。
    - `skipinitialspace`：是否跳过分隔符后的空白字符。
    - `strict`：是否抛出错误，当遇到格式问题时。

__2. `csv.reader`是可迭代对象__

包含以下属性
- `csvreader.dialect`：返回其`dialect`
- `csvreader.line_num`：返回读入的行数


### 5.3 `csv.writer`对象和CSV文件的写入
__1. `csv.writer`对象用于把列表对象数据写入CSV文件__

构造函数为：
```python
csv.writer(csvfile,dialect = 'excel',**fmtparams)
```
__2. 方法和属性__

- `csvwriter.writerow(row)`：方法，写入一行数据
- `csvwriter.writerrows(rows)`：方法，写入多行数据  


## 六. 对象序列化
### 6.1 概述
- 对象序列化又称为串行化，即将对象转换为数据形式，并转储至磁盘文件或通过网络实现跨平台传播
- 反序列化：从磁盘数据文件或接收到的数据形式恢复，以得到相应对象的过程
- 多个对象可以串行化转储到一个磁盘文件，用户不必关心数据的格式
-  使用`pickle` / `cPickle`模块中提供的函数可以实现Python对象的序列化
### 6.2 `pickle`模块和对象序列化
`pickle`模块实现了Python数据对象的序列化和反序列化，基本语法格式为：
```python
pickle.dump(obj,file,protocol = None)   # 将对象obj保存到文件file中
pickle.load(file)                       # 从file中读取并重构1个对象
```
- `obj`：要序列化的 Python 对象。
- `file`：一个文件对象，必须以二进制写入模式（`'wb'`）打开。
- `protocol`：可选参数，指定使用的序列化协议版本。默认值是 `None`，表示使用当前 Python 版本的默认协议。
### 6.3 `json`模块和JSON格式数据
- JSON定义了一种标准格式，用字符串来描述典型的内置对象
- Python标准库模块`json`包含将Python对象编码为JSON格式以及将JSON解码到Python对象的函数
```python
dumps(obj)      # 将obj对象序列化为JSON字符串后返回JSON字符串
dump(obj,fp)    # 将obj对象序列化为JSON字符串后写入文件fp中
loads(s)        # 将JSON字符串s反序列化返回该对象
load(fp)        # 从文件fp中读取JSON字符串并反序列化后返回该对象
```
## 七. `os`模块和文件目录操作
使用标准库中的`os`模块，用户可以实现操作系统的目录处理，例如创建目录、删除目录等操作
```python
os.getcwd()  # 获取当前工作目录
os.chdir()  # 切换到当前工作目录
os.mkdir()  # 创建单级目录
os.makedirs()   # 创建多级目录
os.listdir()  # 显示目录中的文件/子目录列表
os.rmdir()    # 删除目录
os.remove()   # 删除文件
os.rename()#文件或目录重命名
```