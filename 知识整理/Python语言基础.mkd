# Python语言基础
## 一.Python程序概述
python程序可以分解为模块、语句、表达式和对象：
* 模块：模块是一个包含Python定义和语句的文件。
* 语句：语句是Python程序的基本构建块，用于创建对象、变量赋值、调用函数、控制程序流程等。语句包含表达式和操作符，用于计算和操作对象。
* 表达式：表达式是计算的基本单位，用于产生新的值或对象。
* 对象：对象是Python程序中最基本的数据结构，包括数字、字符串、列表、字典等。

## 二.Python对象和引用
### 2.1 python对象概述
数据表示为对象 \
对象本质上是一个内存块，拥有特定的值，支持特定类型的操作
python对象的三个要素：
* 标识：用于唯一标识对象，通常是对象在内存中的地址。
* 类型：用于确定对象支持的操作和方法。
* 值：对象所存储的数据。
```python
id(obj)      #返回对象的标识
type(obj)    #返回对象的类型
obj.value    #返回对象的值
print(obj)   #打印对象的值
```

### 2.2 对象的创建
#### 利用字面量
字面量是用于表示某种数据类型固定值的表示法，在Python语句中解释为表达式，Python基于字面量创建相应数据类型的对象
```python
124         #整数字面量
```

#### 使用类的构造函数和表达式
* 直接调用类对象（内置数据类型）：
```python
int(123)     #创建一个整数对象，值为123
```
* 调用类的构造函数：


### 2.3 数据类型
* 所有对象都有一个数据类型，用于确定对象支持的操作和方法。

* 包括内置数据类型和自定义数据类型。
* 内置数据类型包括：
    * 数字类型：整数、浮点数、复数
    * 字符串类型：str
    * 列表类型：list
    * 元组类型：tuple
    * 字典类型：dict
    * 集合类型：set
    * 布尔类型：bool
    * 空类型：NoneType
* 自定义数据类型包括：
    * 类：class
    * 函数：function
    * 模块：module
    * 包：package

### 2.4 变量和对象的引用
* 变量是一个用于引用对象的标识符。
* python对象是位于计算机内存中的一个从内存数据块，为了引用对象；必须要通过赋值
```python
a = 123     # 创建一个整数对象，值为 123，将其引用赋值给变量 a
```

* 多个变量可以引用同一个对象，一个变量也可以改变指向其他的对象
### 2.5 动态类型语言&强类型语言
* 动态类型语言：变量不需要显式声明数据类型，根据变量的赋值，动态确定变量的类型。
* 强类型语言：变量的类型在编译时确定，只支持该类型的操作和方法。

### 2.6 对象内存
* python中的对象通常存储在堆内存中，每个对象都有一个唯一的标识和类型信息。
* 如果一个对象不再被引用，那么它就会被垃圾回收器回收。

### 2.7 对象值得比较和引用判别
区别
* 比较：用于判断两个对象的值是否相等，使用 `==` 运算符。
* 引用判别：用于判断两个对象是否引用同一个内存块，使用 `is` 运算符。
```python
a = 123
b = 123
a == b  # True，值相等
a is b  # False，引用不同
```
### 2.8 可变对象和不可变对象
* 可变对象：对象的值可以改变，例如列表、字典、集合等。
* 不可变对象：对象的值不能改变，例如整数、浮点数、字符串、元组等。


## 三.标识符和命名规则
在Python中，标识符是用于命名变量、函数、类、模块和包的名称。

### 3.1 标识符
标识符是由字母、数字和下划线组成的字符串，不能以数字开头。
* 区分大小写
* 不能使用关键字作为标识符
* 不能包含空格或特殊字符
* 建议使用有意义的名称，遵循驼峰命名法或下划线命名法。
* 避免使用python预定义标识符作为自定义标识符名

### 3.2 保留关键字
保留关键字是Python语言中具有特殊含义的标识符，不能用作变量名、函数名、类名或模块名。
```python
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await',
 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except',
 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
```

### 3.3 命名规则
* __模块名__：使用小写字母，多个单词之间使用下划线分隔。
* __包名__：使用小写字母，多个单词之间使用下划线分隔。
* __类名__：使用驼峰命名法，每个单词的首字母大写。
* __函数名__：使用小写字母，多个单词之间使用下划线分隔。
* __变量名__：使用小写字母，多个单词之间使用下划线分隔。
* __常量名__：使用大写字母，多个单词之间使用下划线分隔。
* __下划线命名法__：使用下划线分隔单词，用于变量名、函数名、模块名、包名等。
* __驼峰命名法__：使用大写字母分隔单词，用于类名。

## 四.变量和赋值语句
在python中一切皆是对象，对象是某个类的实例

### 4.1 变量的声明和赋值
把一个变量绑定到某个对象\
变量在被访问之前必须初始化，否则会报错
```python
变量名 = 字面量或表达式
```
### 4.2 链式赋值语句
链式赋值语句用于为多个变量赋值同一个值
```python
变量 1 = 变量 2 = 表达式 
```
```python
变量 2 = 表达式
变量 1 = 变量 2
```
赋值时，右边表达式的值会先计算，然后赋值给左边的变量。
### 4.3 复合赋值语句
| 运算符 | 描述 |
| --- | --- | 
| += | 加法赋值 |
| -= | 减法赋值 |
| *= | 乘法赋值 |
| /= | 除法赋值 |
| %= | 取模赋值 |
| **= | 幂赋值 |
| //= | 整除赋值 |

### 4.4 删除变量
使用del语句删除变量
```python
del 变量名
```

### 4.5 序列解包赋值
序列解包赋值用于将序列中的元素依次赋值给多个变量。
```python
变量 1, 变量 2, ..., 变量 n = 序列
```

### 4.6 常量
常量是指在程序运行过程中值不能改变的变量。
在Python中，通常使用大写字母和下划线来表示常量。
```python
PI = 3.14159265358979323846
```
## 五.表达式和运算符
### 5.1 表达式
表达式时可以计算的代码片段，由操作数、运算符和圆括号按一定规则组成
* 操作数：
    * 字面量：整数、浮点数、字符串、布尔值等
    * 变量：存储在内存中的对象
    * 函数调用：返回一个值
* 书写规则
    * 从左到右在同一个基准上书写
    * 乘号不能省略
    * 括号必须成对出现，可以嵌套使用
### 5.2 运算符
运算符是用于执行特定操作的符号。
* 算术运算符：+、-、*、/、%、**、//
* 比较运算符：==、!=、>、<、>=、<=
* 逻辑运算符：and、or、not

优先级：括号 > 幂 > 乘除取模整除 > 加减 > 比较 > not > and > or

| 运算符 | 描述 |
| --- | --- |
| () | 圆括号 |
| ** | 幂运算 |
| *、/、%、// | 乘、除、取模、整除 |
| +、- | 加、减 |
| ==、!=、>、<、>=、<= | 比较运算符 |
| not | 逻辑非 |
| and | 逻辑与 |
| or | 逻辑或 |

## 六.语句
语句是Python程序的过程构造块，用于定义函数、定义类、创建对象、变量赋值、调用函数、控制分支和创建循环等
* 简单语句：
```python
赋值语句、pass空语句、del语句、return语句、break语句、continue语句、import语句、global语句等
```
* 复合语句:
```python
if语句、while语句、for语句、try语句、def语句、class语句和with语句
```
复合语句的缩进书写规则：
* 复合语句由头部语句和构造体语句组成
* 头部语句有相应的关键字开始，构造体语句块则为下一行开始的一行或多行缩进代码
* 构造体的缩进一般相对于头部语句缩进四个空格，且每一行缩进必须一致
* 如果条件语句、循环语句、函数定义和类定义比较短，可以放在同一行

注释语句
* 单行注释：#
* 多行注释：""" """


